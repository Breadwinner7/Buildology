'use client'

import React, { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useNotifications } from '@/hooks/useNotifications'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Separator } from '@/components/ui/separator'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import {
  Bell,
  BellRing,
  Check,
  CheckCheck,
  Trash2,
  Settings,
  ExternalLink,
  Clock,
  AlertTriangle,
  Info,
  AlertCircle
} from 'lucide-react'
import { cn } from '@/lib/utils'
import { formatDistanceToNow } from 'date-fns'
import type { NotificationData, NotificationPriority } from '@/lib/notifications/NotificationSystem'

const priorityIcons: Record<string, any> = {
  low: Info,
  medium: Bell,
  high: AlertTriangle,
  urgent: AlertCircle,
  normal: Bell
}

const priorityColors: Record<string, string> = {
  low: 'text-blue-500',
  medium: 'text-yellow-500', 
  high: 'text-orange-500',
  urgent: 'text-red-500',
  normal: 'text-gray-500'
}

interface NotificationItemProps {
  notification: NotificationData
  onMarkAsRead: (id: string) => void
  onDelete: (id: string) => void
  onNavigate: (url?: string) => void
}

function NotificationItem({ notification, onMarkAsRead, onDelete, onNavigate }: NotificationItemProps) {
  const PriorityIcon = priorityIcons[notification.priority]
  
  return (
    <div
      className={cn(
        'flex items-start gap-3 p-3 hover:bg-muted/50 cursor-pointer transition-colors',
        !notification.read && 'bg-blue-50/50 border-l-2 border-l-blue-500'
      )}
      onClick={() => {
        if (!notification.read) {
          onMarkAsRead(notification.id)
        }
        onNavigate(notification.action_url)
      }}
    >
      {/* Priority Icon */}
      <div className={cn('mt-0.5', priorityColors[notification.priority])}>
        <PriorityIcon className="w-4 h-4" />
      </div>

      {/* Content */}
      <div className="flex-1 min-w-0 space-y-1">
        <div className="flex items-start justify-between gap-2">
          <h4 className={cn(
            'text-sm font-medium leading-tight',
            notification.read ? 'text-muted-foreground' : 'text-foreground'
          )}>
            {notification.title}
          </h4>
          {!notification.read && (
            <div className="w-2 h-2 bg-blue-600 rounded-full flex-shrink-0 mt-1" />
          )}
        </div>
        
        <p className="text-xs text-muted-foreground line-clamp-2 leading-relaxed">
          {notification.message}
        </p>
        
        <div className="flex items-center justify-between gap-2 pt-1">
          <div className="flex items-center gap-1 text-xs text-muted-foreground">
            <Clock className="w-3 h-3" />
            <span>{formatDistanceToNow(new Date(notification.created_at), { addSuffix: true })}</span>
          </div>
          
          {/* Action Buttons */}
          <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
            {!notification.read && (
              <Button
                variant="ghost"
                size="sm"
                className="h-6 w-6 p-0"
                onClick={(e) => {
                  e.stopPropagation()
                  onMarkAsRead(notification.id)
                }}
                title="Mark as read"
              >
                <Check className="w-3 h-3" />
              </Button>
            )}
            
            <Button
              variant="ghost"
              size="sm"
              className="h-6 w-6 p-0 text-destructive hover:text-destructive"
              onClick={(e) => {
                e.stopPropagation()
                onDelete(notification.id)
              }}
              title="Delete notification"
            >
              <Trash2 className="w-3 h-3" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}

export function NotificationDropdown() {
  const router = useRouter()
  const [open, setOpen] = useState(false)
  const {
    notifications,
    unreadCount,
    isLoading,
    markAsRead,
    markAllAsRead,
    deleteNotification,
    requestPermission,
    refetch
  } = useNotifications()

  const recentNotifications = notifications.slice(0, 10)
  const hasUnread = unreadCount > 0

  const handleNavigate = (url?: string) => {
    setOpen(false)
    if (url) {
      router.push(url)
    }
  }

  const handleMarkAllAsRead = () => {
    markAllAsRead()
  }

  const handleRequestPermission = async () => {
    const granted = await requestPermission()
    if (granted) {
      // Show success message
    }
  }

  return (
    <DropdownMenu open={open} onOpenChange={setOpen}>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="sm" className="relative">
          {hasUnread ? (
            <BellRing className="w-5 h-5" />
          ) : (
            <Bell className="w-5 h-5" />
          )}
          {unreadCount > 0 && (
            <Badge 
              variant="destructive" 
              className="absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs"
            >
              {unreadCount > 99 ? '99+' : unreadCount}
            </Badge>
          )}
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent align="end" className="w-96 p-0">
        {/* Header */}
        <div className="flex items-center justify-between p-4 pb-2">
          <h3 className="font-semibold text-sm">Notifications</h3>
          <div className="flex items-center gap-2">
            {hasUnread && (
              <Button
                variant="ghost"
                size="sm"
                className="text-xs h-8 px-2"
                onClick={handleMarkAllAsRead}
              >
                <CheckCheck className="w-3 h-3 mr-1" />
                Mark all read
              </Button>
            )}
            <Button
              variant="ghost"
              size="sm"
              className="h-8 w-8 p-0"
              onClick={() => refetch()}
              title="Refresh"
            >
              <Bell className="w-3 h-3" />
            </Button>
          </div>
        </div>

        <Separator />

        {/* Notifications List */}
        {isLoading ? (
          <div className="p-8 text-center text-muted-foreground">
            <div className="animate-spin w-6 h-6 border-2 border-current border-t-transparent rounded-full mx-auto mb-2" />
            <p className="text-sm">Loading notifications...</p>
          </div>
        ) : recentNotifications.length > 0 ? (
          <>
            <ScrollArea className="max-h-96">
              <div className="divide-y">
                {recentNotifications.map((notification) => (
                  <div key={notification.id} className="group">
                    <NotificationItem
                      notification={notification}
                      onMarkAsRead={markAsRead}
                      onDelete={deleteNotification}
                      onNavigate={handleNavigate}
                    />
                  </div>
                ))}
              </div>
            </ScrollArea>
            
            {/* Footer */}
            <Separator />
            <div className="p-3">
              <Button
                variant="ghost"
                className="w-full text-sm"
                onClick={() => {
                  handleNavigate('/notifications')
                }}
              >
                <ExternalLink className="w-3 h-3 mr-2" />
                View all notifications
              </Button>
            </div>
          </>
        ) : (
          <div className="p-8 text-center text-muted-foreground">
            <Bell className="w-12 h-12 mx-auto mb-3 opacity-50" />
            <p className="text-sm font-medium mb-1">No notifications</p>
            <p className="text-xs">You're all caught up!</p>
          </div>
        )}

        {/* Settings Footer */}
        <Separator />
        <div className="p-3 flex items-center justify-between">
          <Button
            variant="ghost"
            size="sm"
            className="text-xs"
            onClick={handleRequestPermission}
          >
            <Settings className="w-3 h-3 mr-1" />
            Enable browser notifications
          </Button>
        </div>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}