'use client'

import { useEffect, useState } from 'react'
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Label } from '@/components/ui/label'
import { supabase } from '@/lib/supabaseClient'
import { MultiSelect } from '@/components/ui/multiselect' // or a select component of your choice
import { toast } from 'sonner'

const VULNERABILITY_OPTIONS = [
  'Elderly',
  'Mobility Issues',
  'Mental Health',
  'Health Conditions',
  'Single Parent',
  'Language Barrier',
  'Financial Hardship',
]

interface Props {
  projectId: string
}

export function VulnerabilityFlagsCard({ projectId }: Props) {
  const [selectedFlags, setSelectedFlags] = useState<string[]>([])
  const [editing, setEditing] = useState(false)
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    async function fetchFlags() {
      const { data, error } = await supabase
        .from('projects')
        .select('vulnerability_flags')
        .eq('id', projectId)
        .single()

      if (error) {
        console.error('Error fetching vulnerability flags:', error)
        return
      }

      setSelectedFlags(data?.vulnerability_flags || [])
    }

    fetchFlags()
  }, [projectId])

  async function handleSave() {
    setLoading(true)

    const { error } = await supabase
      .from('projects')
      .update({ vulnerability_flags: selectedFlags })
      .eq('id', projectId)

    setLoading(false)

    if (error) {
      toast.error('Failed to update flags')
    } else {
      toast.success('Vulnerability flags updated')
      setEditing(false)
    }
  }

  return (
    <Card className="relative">
      <CardHeader>
        <CardTitle>Vulnerability Status</CardTitle>
      </CardHeader>
      <CardContent>
        {!editing ? (
          <div className="space-y-2">
            {selectedFlags.length > 0 ? (
              <div className="flex flex-wrap gap-2">
                {selectedFlags.map(flag => (
                  <Badge key={flag} variant="destructive">
                    {flag}
                  </Badge>
                ))}
              </div>
            ) : (
              <p className="text-muted-foreground text-sm">No flags set</p>
            )}
            <Button
              variant="outline"
              size="sm"
              onClick={() => setEditing(true)}
              className="mt-3"
            >
              Edit Flags
            </Button>
          </div>
        ) : (
          <div className="space-y-3">
            <Label>Select Vulnerability Flags</Label>
            <MultiSelect
              options={VULNERABILITY_OPTIONS}
              selected={selectedFlags}
              onChange={setSelectedFlags}
            />
            <div className="flex gap-2">
              <Button
                onClick={handleSave}
                disabled={loading}
              >
                Save
              </Button>
              <Button
                variant="outline"
                onClick={() => setEditing(false)}
                disabled={loading}
              >
                Cancel
              </Button>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
